name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build:
    name: Build ${{ matrix.runtime }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: OpenCodeUpdater-win-x64
            executable-extension: .exe
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: OpenCodeUpdater-linux-x64
            executable-extension: ''
          
              
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build and publish AOT
      run: |
        dotnet publish --configuration Release --runtime ${{ matrix.runtime }} --self-contained --output ./publish/${{ matrix.runtime }} -p:PublishAot=true -p:PublishTrimmed=true -p:TrimMode=full

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd ./publish/${{ matrix.runtime }}
        7z a -tzip ../../${{ matrix.artifact-name }}.zip *
        
    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd ./publish/${{ matrix.runtime }}
        tar -czf ../../${{ matrix.artifact-name }}.tar.gz *
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-name }}.zip
        
    - name: Upload artifacts (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.artifact-name }}.tar.gz

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Generate release notes
      id: release_notes
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        else
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        fi
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > release_notes.md
          git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "First release of OpenCodeUpdater." >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "- **Windows (x64)**: OpenCodeUpdater-win-x64.zip" >> release_notes.md
        echo "- **Linux (x64)**: OpenCodeUpdater-linux-x64.tar.gz" >> release_notes.md

    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PRERELEASE_FLAG=""
        if [ "${{ github.event.inputs.prerelease }}" == "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        fi
        
        gh release create "${{ steps.get_version.outputs.version }}" \
          --title "Release ${{ steps.get_version.outputs.version }}" \
          --notes-file release_notes.md \
          $PRERELEASE_FLAG \
          ./artifacts/OpenCodeUpdater-win-x64/*.zip \
          ./artifacts/OpenCodeUpdater-linux-x64/*.tar.gz \
